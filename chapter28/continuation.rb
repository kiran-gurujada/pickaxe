# Continuation objects are generated by the Object#callcc method which
# becomes available only when the +continuation+ library is loaded.
#
# They hold a return address and execution context allowing a nonlocal return
# to the end of the callcc block from anywhere within a program.
#
# They act something like a thread.
#
# This (somewhat contrived) example allows the inner loop to abandon
# processing early.

# - Does a nonlocal exit when a condition is met:

require 'continuation'
callcc do |cont|
  (0..4).each do |i|
    print "\n#{i}: "
    for j in i*5...(i+1)*5
      cont.call() if j == 7
      printf "%3d", j
    end
  end
end
print "\n"

# Produces:
#
# 0:   0  1  2  3  4
# 1:   5  6

# - The call stack for methods is preserved in continuations:

require 'continuation'
def strange
  callcc { |continuation| return continuation }
  print "Back in method, "
end
print "Before method. "
continuation = strange()
print "After method. "
continuation.call if continuation

# Produces:
#
# Before method. After method. Back in method, After method.
